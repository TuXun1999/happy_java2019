package array;
import java.util.ArrayList;
import java.util.LinkedList;


public class test_list {
	public static void main(String[] args){
	/*
	 * List: an object to store any type of data
	 * dimension: automatically adjusted
	 * elements: any type you want, even in same list
	 * import: java.util.List
	 * Operations: 
	 * elements in a Java list can
	 * be inserted, accessed, iterated, and removed;
	 * any type of object can be added to a list;
	 * Sorts:
	 * array list, linked list, stack list, vector list;
	 * List listA = new ArrayList();  --->  special in java; list without dimension
	 * List listB = new LinkedList(); --->  easy to insert another value (no need to shift, just to change the reference to next value)
	 * List listC = new Vector();
	 * List listD = new Stack();
	 * 
	 */
		//Part I: ArrayList
		//test_arraylist();
		
		//Part II: ex
		//ex2();
		
		//Part III: Linked List
		//example();
		//Part IV: exs
		ex3();
	
	}
	
	static void test_arraylist(){
		ArrayList test = new ArrayList();
		/*
		 *Add elements into the list 
		 */
		test.add("Hello");
		test.add(3.5);
		
		
		for (Object temp: test){
			System.out.println(temp);
		}
		
	}
	static void ex1(){
		String first = "Tom";
		String last = "Smith";
		
		String address = "No.800 Dong Chuan Road";
		String number = "13319413793";
		
		int age = 34;
		
		String[] degrees = {"bachelor", "master", "doctor"};
		//Array list to store any type of data
		ArrayList info1 = new ArrayList();
		info1.add(first);
		info1.add(last);
		
		info1.add(address);
		info1.add(age);
		info1.add(number);
		
		ArrayList<String> info2 = new ArrayList();
		for (int i = 0; i < degrees.length; i++){
			info2.add(degrees[i]);
		}
		
		System.out.println("Name: " 
				+ info1.get(0) + " " + info1.get(1));
		System.out.println("Address: " + info1.get(2));
		System.out.println("Age: " + info1.get(3));
		System.out.println("Tel: " + info1.get(4));
		
		System.out.println("Degrees: ");
		System.out.println("Method 1: ");
		for (int j = 0; j < info2.size(); j++){
			System.out.println(info2.get(j));
		}
		/*
		 * Method 2
		 */
		System.out.println("Method 2: ");
		for (Object temp: info2){
			System.out.println(temp);
		}
		/*
		 * Method 3: print all the elements in one arrayList
		 */
		System.out.println("Method 3: ");
		System.out.println(info2);
		
		
		/*
		 * Methods:
		 * size(): return the size of the arrayList
		 * add(int index, Object element) ---> not compatible if wrong position
		 * remove(int index)
		 * indexOf()	----> return the index of the object; -1 for nonexistence
		 * LastindexOf() -----> similar
		 */
	}
	
	static void ex2(){
		//Create an array list in the type of string
		ArrayList<String> test = new ArrayList<String>();
		/*
		 * As for int,double, the correct way is to use:
		 * ArrayList<Integer> test = new ArrayList<Integer>();
		 * ArrayList<Double> test = new ArrayList<Double>();
		 */
		test.add("2");
		test.add("5");
		test.add("11");
		test.add("3");
		test.add("15");
		
		System.out.println("The array list: ");
		System.out.println(test);
		System.out.println("The position of 5: " + test.indexOf("5"));
		
	}
	
	
	static void example(){
		/*
		 * Methods related to linked list are similar to 
		 * the ones related to Array list
		 */
		
		/*Linked List Declaration*/
		LinkedList<String> linkedlist = new LinkedList<String>();
		
		/*Example to show how to add elements into the list*/
		for (int i = 0 ; i < 6; i ++){
			String tmp = "item" + i;
			linkedlist.add(tmp);
		}
		System.out.println("Linked List contents: " + linkedlist);
		
		/*Add first and last Element*/
		linkedlist.addFirst("First Item");
		linkedlist.addLast("Last Item");
		System.out.println("After addition: " + linkedlist);
		
		
		
		
	}
	static void ex3(){
		int N = 6;
		ArrayList<ArrayList> matrix = new ArrayList<ArrayList>();
		
		for (int i = 0; i < N; i++){
			ArrayList<Integer> row = new ArrayList<Integer>();
			for (int j = 0; j < N; j++){
				row.add(10 + N * 10 * i + 10 * j);
			}
			matrix.add(row);
		}
		for (int i = 0; i < N; i++){
			ArrayList row = matrix.get(i);
			for (int j = 0; j < N; j++){
			System.out.print(row.get(j) + "\t");
			if (j == N - 1)
			System.out.println();
			}
		}
	}
}
